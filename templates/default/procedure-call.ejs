<%
const { utils, route, config } = it;
const { _, getInlineParseContent } = utils;
const { parameters, path, method, payload, query, security, requestParams } = route.request;
const { type } = route.response;
const routeDocs = includeFile("./route-docs", { config, route, utils });
const queryName = (query && query.name) || "params";
const pathParams = _.values(parameters);
const pathParamsNames = _.map(pathParams, "name");




const typeWithOutVoid = type === 'void' ? 'any' : type;
const argToTmpl = ({ name, optional, type, defaultValue }) => `${name}${!defaultValue && optional ? '?' : ''}: ${type}${defaultValue ? ` = ${defaultValue}` : ''}`;

const rawWrapperArgs = config.extractRequestParams ?
    _.compact([
        requestParams && {
          name: pathParams.length ? `{ ${_.join(pathParamsNames, ", ")}, ...${queryName} }` : queryName,
          optional: false,
          type: getInlineParseContent(requestParams),
        },
        ...(!requestParams ? pathParams : []),
        payload
    ]) :
    _.compact([
        ...pathParams,
        query,
        payload
    ])

const wrapperArgs = _
    .sortBy(rawWrapperArgs, [o => o.optional])
    .map(argToTmpl)
    .join(', ')

const bodyTmpl = _.get(payload, "name") || null;
const queryTmpl = (query != null && queryName) || null;
const securityTmpl = !!security;

%>
/**
<%~ routeDocs.description %>

*<% /* Here you can add some other JSDoc tags */ %>

<%~ routeDocs.lines %>

*/
<%~ route.routeName.usage %><%~ route.namespace ? ': ' : ' = ' %>
(<%~ wrapperArgs %>)
<%~ `: Promise<${typeWithOutVoid}>` %>
=>
<%~ `$${method}` %><<%~ typeWithOutVoid %>>
    (`<%~ path %>`,
    {
        <%~ bodyTmpl ? `${bodyTmpl},` : '' %>
        <%~ queryTmpl ? `'params': ${queryTmpl},` : '' %>
        <%~`isBearer: ${securityTmpl}`%>
    })
    <%~ route.namespace ? ',' : '' %>